
-- Running command `
# Read the design
read_verilog /home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v
# Synthesize the design
synth -top SRAM_32x128_1rw

# Map to generic gates
abc -g gates

# Optimize it
opt_clean -purge
# Clean up
clean
# Generate netlist
write_verilog -noattr /home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1_net.v
# Show statistics
stat
' --

1. Executing Verilog-2005 frontend: /home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v
Parsing Verilog input from `/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v' to AST representation.
Generating RTLIL representation for module `\SRAM_32x128_1rw'.
Successfully finished Verilog frontend.

2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.1.1. Analyzing design hierarchy..
Top module:  \SRAM_32x128_1rw

2.1.2. Analyzing design hierarchy..
Top module:  \SRAM_32x128_1rw
Removed 0 unused modules.

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:34$19'.
  Set init value: \trigger = 1'0
Found init rule in `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:32$18'.
  Set init value: \counter = 8'00000000

2.2.4. Executing PROC_ARST pass (detect async resets in processes).

2.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:34$19'.
     1/1: $1\trigger[0:0]
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:32$18'.
     1/1: $1\counter[7:0]
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:54$14'.
     1/2: $0\trigger[0:0]
     2/2: $0\counter[7:0]
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:48$10'.
     1/1: $0\dout0[31:0]
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
     1/3: $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6
     2/3: $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_DATA[31:0]$5
     3/3: $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_ADDR[6:0]$4
Creating decoders for process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
     1/4: $0\din0_reg[31:0]
     2/4: $0\addr0_reg[6:0]
     3/4: $0\web0_reg[0:0]
     4/4: $0\csb0_reg[0:0]

2.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SRAM_32x128_1rw.\counter' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:54$14'.
  created $dff cell `$procdff$32' with positive edge clock.
Creating register for signal `\SRAM_32x128_1rw.\trigger' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:54$14'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\SRAM_32x128_1rw.\dout0' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:48$10'.
  created $dff cell `$procdff$34' with negative edge clock.
Creating register for signal `\SRAM_32x128_1rw.$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_ADDR' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
  created $dff cell `$procdff$35' with negative edge clock.
Creating register for signal `\SRAM_32x128_1rw.$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_DATA' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
  created $dff cell `$procdff$36' with negative edge clock.
Creating register for signal `\SRAM_32x128_1rw.$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
  created $dff cell `$procdff$37' with negative edge clock.
Creating register for signal `\SRAM_32x128_1rw.\csb0_reg' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\SRAM_32x128_1rw.\web0_reg' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\SRAM_32x128_1rw.\addr0_reg' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\SRAM_32x128_1rw.\din0_reg' using process `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
  created $dff cell `$procdff$41' with positive edge clock.

2.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:34$19'.
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:32$18'.
Found and cleaned up 2 empty switches in `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:54$14'.
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:54$14'.
Found and cleaned up 1 empty switch in `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:48$10'.
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:48$10'.
Found and cleaned up 1 empty switch in `\SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:43$3'.
Removing empty process `SRAM_32x128_1rw.$proc$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:36$2'.
Cleaned up 4 empty switches.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 6 unused cells and 22 unused wires.
<suppressed ~7 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
checking module SRAM_32x128_1rw..
found and reported 0 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SRAM_32x128_1rw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SRAM_32x128_1rw.
    Consolidated identical input bits for $mux cell $procmux$26:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6
      New ports: A=1'0, B=1'1, Y=$0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0]
      New connections: $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [31:1] = { $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] $0$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$1_EN[31:0]$6 [0] }
  Optimizing cells in module \SRAM_32x128_1rw.
Performed a total of 1 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \counter = 8'00000000 to constant driver in module SRAM_32x128_1rw.
Promoting init spec \trigger = 1'0 to constant driver in module SRAM_32x128_1rw.
Promoted 2 init specs to constant drivers.

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SRAM_32x128_1rw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SRAM_32x128_1rw.
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing WREDUCE pass (reducing word size of cells).
Removed cell SRAM_32x128_1rw.$procmux$30 ($mux).
Removed cell SRAM_32x128_1rw.$procmux$28 ($mux).
Removed top 31 bits (of 32) from FF cell SRAM_32x128_1rw.$procdff$37 ($dff).

2.8. Executing PEEPOPT pass (run peephole optimizers).

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10. Executing TECHMAP pass (map to technology primitives).

2.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.10.2. Continuing TECHMAP pass.
No more expansions possible.

2.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module SRAM_32x128_1rw:
  created 0 $alu and 0 $macc cells.

2.12. Executing SHARE pass (SAT-based resource sharing).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SRAM_32x128_1rw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SRAM_32x128_1rw.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.13.9. Finished OPT passes. (There is nothing left to do.)

2.14. Executing FSM pass (extract and optimize FSM).

2.14.1. Executing FSM_DETECT pass (finding FSMs in design).

2.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.15. Executing OPT pass (performing simple optimizations).

2.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.15.5. Finished fast OPT passes.

2.16. Executing MEMORY pass.

2.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$17' in module `\SRAM_32x128_1rw': merged $dff to cell.
Checking cell `$memrd$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:50$13' in module `\SRAM_32x128_1rw': merged data $dff with rd enable to cell.

2.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 5 unused cells and 6 unused wires.
<suppressed ~6 debug messages>

2.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\mem' in module `\SRAM_32x128_1rw':
  $memwr$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:45$17 ($memwr)
  $memrd$\mem$/home/omar/research/vulnerable_designs/models_gemini-1.5-pro-latest/sram/worked/sram_HT4_models_gemini-1.5-pro-latest_A1.v:50$13 ($memrd)

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.18. Executing OPT pass (performing simple optimizations).

2.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.
<suppressed ~1 debug messages>

2.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.18.5. Finished fast OPT passes.

2.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \mem in module \SRAM_32x128_1rw:
  created 128 $dff cells and 0 static cells of width 32.
  read interface: 1 $dff and 127 $mux cells.
  write interface: 128 write mux blocks.

2.20. Executing OPT pass (performing simple optimizations).

2.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.
<suppressed ~14 debug messages>

2.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SRAM_32x128_1rw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~129 debug messages>

2.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SRAM_32x128_1rw.
Performed a total of 0 changes.

2.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 0 unused cells and 263 unused wires.
<suppressed ~1 debug messages>

2.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.20.9. Finished OPT passes. (There is nothing left to do.)

2.21. Executing TECHMAP pass (map to technology primitives).

2.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~692 debug messages>

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..

2.22.5. Finished fast OPT passes.

2.23. Executing ABC pass (technology mapping using ABC).

2.23.1. Extracting gate netlist of module `\SRAM_32x128_1rw' to `<abc-temp-dir>/input.blif'..
Extracted 8495 gates and 12664 wires to a netlist network with 4169 inputs and 4128 outputs.

2.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:      128
ABC RESULTS:               MUX cells:     8192
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        7
ABC RESULTS:                OR cells:      155
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:     4367
ABC RESULTS:           input signals:     4169
ABC RESULTS:          output signals:     4128
Removing temp directory.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SRAM_32x128_1rw.
<suppressed ~2016 debug messages>

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SRAM_32x128_1rw'.
Removed a total of 0 cells.

2.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 6 unused cells and 4734 unused wires.
<suppressed ~7 debug messages>

2.24.5. Finished fast OPT passes.

2.25. Executing HIERARCHY pass (managing design hierarchy).

2.25.1. Analyzing design hierarchy..
Top module:  \SRAM_32x128_1rw

2.25.2. Analyzing design hierarchy..
Top module:  \SRAM_32x128_1rw
Removed 0 unused modules.

2.26. Printing statistics.

=== SRAM_32x128_1rw ===

   Number of wires:               8627
   Number of wire bits:          12707
   Number of public wires:         140
   Number of public wire bits:    4220
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              12656
     $_ANDNOT_                     128
     $_DFF_N_                     4128
     $_DFF_P_                       41
     $_MUX_                       8192
     $_NAND_                         3
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        7
     $_OR_                         155

2.27. Executing CHECK pass (checking for obvious problems).
checking module SRAM_32x128_1rw..
found and reported 0 problems.

3. Executing ABC pass (technology mapping using ABC).

3.1. Extracting gate netlist of module `\SRAM_32x128_1rw' to `<abc-temp-dir>/input.blif'..
Extracted 8487 gates and 12656 wires to a netlist network with 4169 inputs and 4128 outputs.

3.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 12 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:     3685
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              NAND cells:    17686
ABC RESULTS:               NOR cells:        4
ABC RESULTS:                OR cells:       32
ABC RESULTS:        internal signals:     4359
ABC RESULTS:           input signals:     4169
ABC RESULTS:          output signals:     4128
Removing temp directory.

4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SRAM_32x128_1rw..
Removed 0 unused cells and 12658 unused wires.
<suppressed ~3 debug messages>

5. Executing Verilog backend.
Dumping module `\SRAM_32x128_1rw'.

6. Printing statistics.

=== SRAM_32x128_1rw ===

   Number of wires:              21556
   Number of wire bits:          25629
   Number of public wires:         138
   Number of public wire bits:    4211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              25587
     $_ANDNOT_                      11
     $_AND_                       3685
     $_DFF_N_                     4128
     $_DFF_P_                       41
     $_NAND_                     17686
     $_NOR_                          4
     $_OR_                          32

End of script. Logfile hash: b8585eeb08
CPU: user 3.68s system 0.05s, MEM: 82.77 MB total, 74.15 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 15x opt_clean (0 sec), 15% 2x write_verilog (0 sec), ...
