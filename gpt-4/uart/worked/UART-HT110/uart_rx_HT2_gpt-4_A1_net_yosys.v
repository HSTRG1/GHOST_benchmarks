/* Generated by Yosys 0.9 (git sha1 1979e0b) */

module uart_rx(trojan_en, clk, resetn, uart_rxd, uart_rx_en, uart_rx_break, uart_rx_valid, uart_rx_data, trojan_activated, trojan_data);
  wire [3:0] _000_;
  wire _001_;
  wire [13:0] _002_;
  wire [1:0] _003_;
  wire [7:0] _004_;
  wire _005_;
  wire _006_;
  wire [7:0] _007_;
  wire [7:0] _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  reg [3:0] bit_counter;
  reg bit_sample;
  input clk;
  reg [13:0] cycle_counter;
  reg [3:0] fsm_state;
  reg [1:0] fsm_trojan_state;
  reg [7:0] received_data;
  input resetn;
  reg rxd_reg;
  reg rxd_reg_0;
  output trojan_activated;
  output [7:0] trojan_data;
  reg [7:0] trojan_data;
  input trojan_en;
  output uart_rx_break;
  output [7:0] uart_rx_data;
  reg [7:0] uart_rx_data;
  input uart_rx_en;
  output uart_rx_valid;
  input uart_rxd;
  assign _013_ = ~fsm_state[2];
  assign _014_ = ~(rxd_reg & fsm_state[0]);
  assign _015_ = resetn & _014_;
  assign _016_ = ~(cycle_counter[5] | cycle_counter[4]);
  assign _017_ = ~(cycle_counter[10] | cycle_counter[13]);
  assign _018_ = _016_ & _017_;
  assign _019_ = ~(cycle_counter[1] | cycle_counter[0]);
  assign _020_ = cycle_counter[7] & cycle_counter[8];
  assign _021_ = _019_ & _020_;
  assign _022_ = _018_ & _021_;
  assign _023_ = cycle_counter[2] & ~(cycle_counter[3]);
  assign _024_ = ~(cycle_counter[9] | cycle_counter[12]);
  assign _025_ = cycle_counter[6] & cycle_counter[11];
  assign _026_ = _024_ & _025_;
  assign _027_ = _023_ & _026_;
  assign _028_ = _022_ & _027_;
  assign _029_ = ~(fsm_state[3] & _028_);
  assign _030_ = cycle_counter[3] & ~(cycle_counter[2]);
  assign _031_ = cycle_counter[12] & ~(cycle_counter[11]);
  assign _032_ = cycle_counter[9] & ~(cycle_counter[6]);
  assign _033_ = _031_ & _032_;
  assign _034_ = _030_ & _033_;
  assign _035_ = ~(_022_ & _034_);
  assign _036_ = ~(_029_ & _035_);
  assign _037_ = ~(fsm_state[3] & _036_);
  assign _038_ = _022_ & _030_;
  assign _039_ = ~(_033_ & _038_);
  assign _040_ = ~(_029_ & _039_);
  assign _009_ = ~(_015_ & _037_);
  assign _041_ = resetn & ~(_036_);
  assign _042_ = ~(fsm_state[3] & _041_);
  assign _043_ = ~(bit_counter[1] | bit_counter[0]);
  assign _044_ = bit_counter[3] & ~(bit_counter[2]);
  assign _045_ = _043_ & _044_;
  assign _046_ = resetn & fsm_state[1];
  assign _047_ = ~(_045_ & _046_);
  assign _012_ = ~(_042_ & _047_);
  assign _048_ = _013_ | _036_;
  assign _049_ = rxd_reg | ~(fsm_state[0]);
  assign _050_ = ~(_048_ & _049_);
  assign _011_ = resetn & _050_;
  assign _051_ = _045_ | ~(fsm_state[1]);
  assign _052_ = ~(fsm_state[2] & _036_);
  assign _053_ = ~(_051_ & _052_);
  assign _010_ = resetn & _053_;
  assign trojan_activated = fsm_trojan_state[1] & ~(fsm_trojan_state[0]);
  assign _054_ = ~(fsm_state[1] | fsm_state[2]);
  assign _055_ = _037_ | ~(_054_);
  assign uart_rx_valid = ~(_050_ | _055_);
  assign _056_ = ~(received_data[2] | received_data[3]);
  assign _057_ = ~(received_data[0] | received_data[1]);
  assign _058_ = _056_ & _057_;
  assign _059_ = ~(received_data[6] | received_data[7]);
  assign _060_ = ~(received_data[4] | received_data[5]);
  assign _061_ = _059_ & _060_;
  assign _062_ = _058_ & _061_;
  assign uart_rx_break = uart_rx_valid & _062_;
  assign _063_ = rxd_reg_0 | uart_rx_en;
  assign _064_ = uart_rxd | ~(uart_rx_en);
  assign _065_ = ~(_063_ & _064_);
  assign _006_ = ~(resetn & _065_);
  assign _066_ = rxd_reg | uart_rx_en;
  assign _067_ = rxd_reg_0 | ~(uart_rx_en);
  assign _068_ = ~(_066_ & _067_);
  assign _005_ = ~(resetn & _068_);
  assign _069_ = ~(fsm_state[3] | fsm_state[2]);
  assign _070_ = fsm_state[3] | ~(_054_);
  assign _071_ = cycle_counter[0] & _070_;
  assign _072_ = cycle_counter[0] ^ _070_;
  assign _002_[0] = _041_ & _072_;
  assign _073_ = cycle_counter[1] & _071_;
  assign _074_ = cycle_counter[1] | _071_;
  assign _075_ = resetn & _074_;
  assign _002_[1] = _075_ & ~(_073_);
  assign _076_ = cycle_counter[1] & cycle_counter[2];
  assign _077_ = _071_ & _076_;
  assign _078_ = cycle_counter[2] ^ _073_;
  assign _002_[2] = _041_ & _078_;
  assign _079_ = cycle_counter[3] | _077_;
  assign _080_ = cycle_counter[3] & _076_;
  assign _081_ = _071_ & _080_;
  assign _082_ = _079_ & ~(_081_);
  assign _002_[3] = _041_ & _082_;
  assign _083_ = cycle_counter[4] & _081_;
  assign _084_ = cycle_counter[4] | _081_;
  assign _085_ = resetn & _084_;
  assign _002_[4] = _085_ & ~(_083_);
  assign _086_ = cycle_counter[5] & _083_;
  assign _087_ = cycle_counter[5] | _083_;
  assign _088_ = resetn & _087_;
  assign _002_[5] = _088_ & ~(_086_);
  assign _089_ = cycle_counter[5] & cycle_counter[6];
  assign _090_ = _083_ & _089_;
  assign _091_ = cycle_counter[6] ^ _086_;
  assign _002_[6] = _041_ & _091_;
  assign _092_ = ~(cycle_counter[7] & _090_);
  assign _093_ = cycle_counter[7] | _090_;
  assign _094_ = _041_ & _093_;
  assign _002_[7] = _092_ & _094_;
  assign _095_ = cycle_counter[8] | ~(_092_);
  assign _096_ = _020_ & _089_;
  assign _097_ = _083_ & _096_;
  assign _098_ = _041_ & ~(_097_);
  assign _002_[8] = _095_ & _098_;
  assign _099_ = cycle_counter[9] & _097_;
  assign _100_ = cycle_counter[9] | _097_;
  assign _101_ = _041_ & _100_;
  assign _002_[9] = _101_ & ~(_099_);
  assign _102_ = cycle_counter[10] & _099_;
  assign _103_ = cycle_counter[10] | _099_;
  assign _104_ = resetn & _103_;
  assign _002_[10] = _104_ & ~(_102_);
  assign _105_ = cycle_counter[11] & _102_;
  assign _106_ = cycle_counter[11] | _102_;
  assign _107_ = _041_ & _106_;
  assign _002_[11] = _107_ & ~(_105_);
  assign _108_ = ~(cycle_counter[12] & _105_);
  assign _109_ = cycle_counter[12] | _105_;
  assign _110_ = _041_ & _109_;
  assign _002_[12] = _108_ & _110_;
  assign _111_ = ~(cycle_counter[13] ^ _108_);
  assign _002_[13] = resetn & _111_;
  assign _112_ = fsm_state[1] & _036_;
  assign _113_ = fsm_state[1] & _040_;
  assign _114_ = resetn & ~(fsm_state[0]);
  assign _115_ = _069_ & _114_;
  assign _116_ = bit_counter[0] & _113_;
  assign _117_ = ~(bit_counter[0] ^ _113_);
  assign _000_[0] = _115_ & ~(_117_);
  assign _118_ = bit_counter[1] & _116_;
  assign _119_ = bit_counter[1] ^ _116_;
  assign _000_[1] = _115_ & _119_;
  assign _120_ = bit_counter[2] | _118_;
  assign _121_ = _115_ & _120_;
  assign _122_ = ~(bit_counter[2] & _118_);
  assign _000_[2] = _121_ & _122_;
  assign _123_ = ~(bit_counter[3] ^ _122_);
  assign _000_[3] = _115_ & _123_;
  assign _124_ = fsm_trojan_state[0] & ~(fsm_trojan_state[1]);
  assign _125_ = ~(received_data[0] & _124_);
  assign _126_ = _124_ | ~(trojan_data[0]);
  assign _007_[0] = ~(_125_ & _126_);
  assign _127_ = ~(received_data[1] & _124_);
  assign _128_ = _124_ | ~(trojan_data[1]);
  assign _007_[1] = ~(_127_ & _128_);
  assign _129_ = ~(received_data[2] & _124_);
  assign _130_ = _124_ | ~(trojan_data[2]);
  assign _007_[2] = ~(_129_ & _130_);
  assign _131_ = ~(received_data[3] & _124_);
  assign _132_ = _124_ | ~(trojan_data[3]);
  assign _007_[3] = ~(_131_ & _132_);
  assign _133_ = ~(received_data[4] & _124_);
  assign _134_ = _124_ | ~(trojan_data[4]);
  assign _007_[4] = ~(_133_ & _134_);
  assign _135_ = ~(received_data[5] & _124_);
  assign _136_ = _124_ | ~(trojan_data[5]);
  assign _007_[5] = ~(_135_ & _136_);
  assign _137_ = ~(received_data[6] & _124_);
  assign _138_ = _124_ | ~(trojan_data[6]);
  assign _007_[6] = ~(_137_ & _138_);
  assign _139_ = ~(received_data[7] & _124_);
  assign _140_ = _124_ | ~(trojan_data[7]);
  assign _007_[7] = ~(_139_ & _140_);
  assign _141_ = ~(fsm_state[3] & received_data[0]);
  assign _142_ = fsm_state[3] | ~(uart_rx_data[0]);
  assign _143_ = ~(_141_ & _142_);
  assign _008_[0] = resetn & _143_;
  assign _144_ = ~(fsm_state[3] & received_data[1]);
  assign _145_ = fsm_state[3] | ~(uart_rx_data[1]);
  assign _146_ = ~(_144_ & _145_);
  assign _008_[1] = resetn & _146_;
  assign _147_ = ~(fsm_state[3] & received_data[2]);
  assign _148_ = fsm_state[3] | ~(uart_rx_data[2]);
  assign _149_ = ~(_147_ & _148_);
  assign _008_[2] = resetn & _149_;
  assign _150_ = ~(fsm_state[3] & received_data[3]);
  assign _151_ = fsm_state[3] | ~(uart_rx_data[3]);
  assign _152_ = ~(_150_ & _151_);
  assign _008_[3] = resetn & _152_;
  assign _153_ = ~(fsm_state[3] & received_data[4]);
  assign _154_ = fsm_state[3] | ~(uart_rx_data[4]);
  assign _155_ = ~(_153_ & _154_);
  assign _008_[4] = resetn & _155_;
  assign _156_ = ~(fsm_state[3] & received_data[5]);
  assign _157_ = fsm_state[3] | ~(uart_rx_data[5]);
  assign _158_ = ~(_156_ & _157_);
  assign _008_[5] = resetn & _158_;
  assign _159_ = ~(fsm_state[3] & received_data[6]);
  assign _160_ = fsm_state[3] | ~(uart_rx_data[6]);
  assign _161_ = ~(_159_ & _160_);
  assign _008_[6] = resetn & _161_;
  assign _162_ = ~(fsm_state[3] & received_data[7]);
  assign _163_ = fsm_state[3] | ~(uart_rx_data[7]);
  assign _164_ = ~(_162_ & _163_);
  assign _008_[7] = resetn & _164_;
  assign _165_ = fsm_trojan_state[0] | trojan_en;
  assign _166_ = resetn & ~(fsm_trojan_state[1]);
  assign _167_ = _165_ & _166_;
  assign _168_ = ~(trojan_en & uart_rx_valid);
  assign _003_[0] = _167_ & _168_;
  assign _169_ = ~(resetn & _124_);
  assign _003_[1] = ~(_168_ | _169_);
  assign _170_ = ~(rxd_reg & _028_);
  assign _171_ = _028_ | ~(bit_sample);
  assign _172_ = ~(_170_ & _171_);
  assign _001_ = resetn & _172_;
  assign _173_ = received_data[1] | _113_;
  assign _174_ = _114_ & _173_;
  assign _175_ = received_data[2] | ~(_113_);
  assign _004_[1] = _174_ & _175_;
  assign _176_ = received_data[0] | _113_;
  assign _177_ = _114_ & _176_;
  assign _178_ = received_data[1] | ~(_113_);
  assign _004_[0] = _177_ & _178_;
  assign _179_ = ~(received_data[3] & _112_);
  assign _180_ = _112_ | ~(received_data[2]);
  assign _181_ = ~(_179_ & _180_);
  assign _004_[2] = _114_ & _181_;
  assign _182_ = ~(received_data[4] & _112_);
  assign _183_ = _112_ | ~(received_data[3]);
  assign _184_ = ~(_182_ & _183_);
  assign _004_[3] = _114_ & _184_;
  assign _185_ = ~(received_data[5] & _112_);
  assign _186_ = _112_ | ~(received_data[4]);
  assign _187_ = ~(_185_ & _186_);
  assign _004_[4] = _114_ & _187_;
  assign _188_ = ~(received_data[6] & _112_);
  assign _189_ = _112_ | ~(received_data[5]);
  assign _190_ = ~(_188_ & _189_);
  assign _004_[5] = _114_ & _190_;
  assign _191_ = ~(received_data[7] & _112_);
  assign _192_ = _112_ | ~(received_data[6]);
  assign _193_ = ~(_191_ & _192_);
  assign _004_[6] = _114_ & _193_;
  assign _194_ = ~(bit_sample & _112_);
  assign _195_ = _112_ | ~(received_data[7]);
  assign _196_ = ~(_194_ & _195_);
  assign _004_[7] = _114_ & _196_;
  always @(posedge clk)
      fsm_state[0] <= _009_;
  always @(posedge clk)
      fsm_state[1] <= _010_;
  always @(posedge clk)
      fsm_state[2] <= _011_;
  always @(posedge clk)
      fsm_state[3] <= _012_;
  always @(posedge clk)
      rxd_reg <= _005_;
  always @(posedge clk)
      rxd_reg_0 <= _006_;
  always @(posedge clk)
      cycle_counter[0] <= _002_[0];
  always @(posedge clk)
      cycle_counter[1] <= _002_[1];
  always @(posedge clk)
      cycle_counter[2] <= _002_[2];
  always @(posedge clk)
      cycle_counter[3] <= _002_[3];
  always @(posedge clk)
      cycle_counter[4] <= _002_[4];
  always @(posedge clk)
      cycle_counter[5] <= _002_[5];
  always @(posedge clk)
      cycle_counter[6] <= _002_[6];
  always @(posedge clk)
      cycle_counter[7] <= _002_[7];
  always @(posedge clk)
      cycle_counter[8] <= _002_[8];
  always @(posedge clk)
      cycle_counter[9] <= _002_[9];
  always @(posedge clk)
      cycle_counter[10] <= _002_[10];
  always @(posedge clk)
      cycle_counter[11] <= _002_[11];
  always @(posedge clk)
      cycle_counter[12] <= _002_[12];
  always @(posedge clk)
      cycle_counter[13] <= _002_[13];
  always @(posedge clk)
      bit_sample <= _001_;
  always @(posedge clk)
      bit_counter[0] <= _000_[0];
  always @(posedge clk)
      bit_counter[1] <= _000_[1];
  always @(posedge clk)
      bit_counter[2] <= _000_[2];
  always @(posedge clk)
      bit_counter[3] <= _000_[3];
  always @(posedge clk)
      received_data[0] <= _004_[0];
  always @(posedge clk)
      received_data[1] <= _004_[1];
  always @(posedge clk)
      received_data[2] <= _004_[2];
  always @(posedge clk)
      received_data[3] <= _004_[3];
  always @(posedge clk)
      received_data[4] <= _004_[4];
  always @(posedge clk)
      received_data[5] <= _004_[5];
  always @(posedge clk)
      received_data[6] <= _004_[6];
  always @(posedge clk)
      received_data[7] <= _004_[7];
  always @(posedge clk)
      trojan_data[0] <= _007_[0];
  always @(posedge clk)
      trojan_data[1] <= _007_[1];
  always @(posedge clk)
      trojan_data[2] <= _007_[2];
  always @(posedge clk)
      trojan_data[3] <= _007_[3];
  always @(posedge clk)
      trojan_data[4] <= _007_[4];
  always @(posedge clk)
      trojan_data[5] <= _007_[5];
  always @(posedge clk)
      trojan_data[6] <= _007_[6];
  always @(posedge clk)
      trojan_data[7] <= _007_[7];
  always @(posedge clk)
      fsm_trojan_state[0] <= _003_[0];
  always @(posedge clk)
      fsm_trojan_state[1] <= _003_[1];
  always @(posedge clk)
      uart_rx_data[0] <= _008_[0];
  always @(posedge clk)
      uart_rx_data[1] <= _008_[1];
  always @(posedge clk)
      uart_rx_data[2] <= _008_[2];
  always @(posedge clk)
      uart_rx_data[3] <= _008_[3];
  always @(posedge clk)
      uart_rx_data[4] <= _008_[4];
  always @(posedge clk)
      uart_rx_data[5] <= _008_[5];
  always @(posedge clk)
      uart_rx_data[6] <= _008_[6];
  always @(posedge clk)
      uart_rx_data[7] <= _008_[7];
endmodule
